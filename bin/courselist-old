#!/usr/bin/env bun
import { $, argv } from "bun";
import { parseArgs } from "util";
import { statSync } from "fs";

import chalk from "chalk";
import convert from "color-convert";

import { COURSE_DIR } from "../lib/constants";
import { zip } from "../lib/utils";

function randomStringColor(str: string, stringToColor: string | null = null): string {
  function djb2(str: string): number {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
      if (hash * 33 > Number.MAX_SAFE_INTEGER) {
        hash = hash & 0xffffff;
      }
      hash = (hash * 33) ^ str.charCodeAt(i);
    }
    return hash >>> 0;
  }

  const palette: string[] = [];
  const N = 32;
  for (let i = 0; i < N; i++) {
    const hue = (i * 360) / N;
    const lightness = 50;
    const saturation = 80;
    palette.push(convert.hsl.hex([hue, saturation, lightness]));
  }
  const color = palette[djb2(str) % palette.length];

  return chalk.hex(color)(stringToColor ?? str);
}

function colorForDigit(digit: string) {
  switch (digit) {
    case "0":
      return chalk.gray;
    case "1":
      return chalk.blue;
    case "2":
      return chalk.green;
    case "3":
      return chalk.yellow;
    case "4":
      return chalk.red;
    case "5":
      return chalk.redBright;
    default:
      return chalk;
  }
}

const { values, positionals } = parseArgs({
  args: argv.slice(2),
  options: {
    raw: {
      type: "boolean",
      default: false,
      short: "r",
    },
  },
  allowPositionals: true,
  strict: true,
});

if (positionals.length !== 0) {
  throw new TypeError("Expected no arguments");
}

async function ls(dir: string): Promise<string[]> {
  return $`ls ${dir}`.quiet().then((r) => r.text().split("\n").filter(Boolean));
}

const depts = await ls(COURSE_DIR);
const courses = await Promise.all(
  depts
    .filter((dept) => statSync(`${COURSE_DIR}/${dept}`).isDirectory())
    .map((dept) =>
      ls(`${COURSE_DIR}/${dept}`) //
        .then((ids) => ids.map((id) => ({ Dept: dept.toUpperCase(), ID: id })))
    )
).then((c) => c.flat());

courses.sort((a, b) => a.Dept.localeCompare(b.Dept) || a.ID.localeCompare(b.ID));

if (values.raw) {
  for (const course of courses) {
    console.log(`${course.Dept} ${course.ID}`);
  }
} else {
  const maxDept = Math.max(...courses.map((c) => c.Dept.length));
  const maxID = Math.max(...courses.map((c) => c.ID.length));
  const colorized = courses.map((c) => ({ Dept: randomStringColor(c.Dept), ID: colorForDigit(c.ID[0])(c.ID) }));
  console.log(`${"Dept".padStart(maxDept)} ${"ID".padStart(maxID)}`);
  console.log(`${"-".repeat(maxDept)} ${"-".repeat(maxID)}`);
  for (const [plain, color] of zip(courses, colorized)) {
    const deptPad = " ".repeat(maxDept - plain.Dept.length);
    const idPad = " ".repeat(maxID - plain.ID.length);
    console.log(`${deptPad}${color.Dept} ${idPad}${color.ID}`);
  }
}
