#!/usr/bin/env python3

import sys
import os
from pathlib import Path

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

from lib import Color

COURSES_DIR = Path.home() / "courses"


def random_string_color(s: str, target: str | None = None) -> str:
    def djb2(s: str) -> int:
        hash = 5381
        for i in range(len(s)):
            if hash * 33 > 2**31:
                hash = hash & 0xFFFFFF
            hash = (hash * 33) ^ ord(s[i])
        return hash

    def hsl_to_rgb(h, s, l):
        c = (1 - abs(2 * l / 100 - 1)) * s / 100
        x = c * (1 - abs(h / 60 % 2 - 1))
        m = l / 100 - c / 2
        r, g, b = [(c, x, 0), (x, c, 0), (0, c, x), (0, x, c), (x, 0, c), (c, 0, x)][
            int(h / 60)
        ]
        return round((r + m) * 255), round((g + m) * 255), round((b + m) * 255)

    def rgb_to_ansi(r, g, b):
        return f"\033[38;2;{r};{g};{b}m"

    palette: list[tuple[int, int, int]] = []
    N = 32
    for i in range(N):
        hue = i * 360 / N
        saturation = 65
        lightness = 50
        palette.append(hsl_to_rgb(hue, saturation, lightness))
    color = palette[djb2(s) % len(palette)]
    return rgb_to_ansi(*color) + (target or s) + Color.RESET.value


def color_for_digit(d: str) -> Color:
    colors = [
        Color.TEXT_GRAY,
        Color.TEXT_BLUE,
        Color.TEXT_GREEN,
        Color.TEXT_YELLOW,
        Color.TEXT_RED,
        Color.TEXT_RED_BRIGHT,
    ]
    try:
        n = int(d)
        return colors[n] if n >= 0 and n < len(colors) else Color.NONE
    except ValueError:
        return Color.NONE


def iterlast(it):
    it = iter(it)
    try:
        n = next(it)
    except StopIteration:
        return
    for x in it:
        t = n
        n = x
        yield False, t
    yield True, n


for dept in sorted(COURSES_DIR.iterdir()):
    if dept.name.startswith(".") or not dept.is_dir():
        continue
    print(random_string_color(dept.name.upper()))
    for is_last, course in iterlast(sorted(dept.iterdir())):
        if course.name.startswith(".") or not course.is_dir():
            continue
        print(
            color_for_digit(course.name[0]).value,
            "└── " if is_last else "├── ",
            course.name,
            Color.RESET.value,
            sep="",
        )
    print()
