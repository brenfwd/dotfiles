#!/usr/bin/env python3

import sys
import os
import re
from enum import Enum
import subprocess
from pathlib import Path


class Color(Enum):
    RESET = "\u001b[0m"
    BG_CYAN_BRIGHT = "\u001b[46;1m"

    TEXT_BLACK = "\u001b[30m"
    TEXT_GRAY = "\u001b[38;5;243m"
    TEXT_WHITE = "\u001b[37m"
    TEXT_CYAN = "\u001b[36m"
    TEXT_YELLOW = "\u001b[33m"
    TEXT_GREEN_BRIGHT = "\u001b[32;1m"
    TEXT_RED_BRIGHT = "\u001b[31;1m"
    TEXT_GREEN = "\u001b[32m"

    STYLE_BOLD = "\u001b[1m"
    STYLE_ITALIC = "\u001b[3m"


OUTPUT = ""

IS_ROOT = os.getuid() == 0

COURSES_DIR = Path.home() / "courses"


def write(*args: str):
    global OUTPUT
    for arg in args:
        OUTPUT += arg


def cwrite(arg: str, *colors: Color):
    write(*[c.value for c in colors], arg, Color.RESET.value)


if os.getenv("VIRTUAL_ENV"):
    cwrite(" env ", Color.BG_CYAN_BRIGHT, Color.TEXT_BLACK, Color.STYLE_BOLD)
    write(" ")

if IS_ROOT:
    write("root")
else:
    cwrite(os.getenv("USER") or "unknown", Color.TEXT_GRAY)

write(" ")

hostname = subprocess.check_output("hostname").decode("utf-8").strip()
cwrite(hostname, Color.TEXT_CYAN)

write(" ")

cwd = Path.cwd()
if cwd.is_relative_to(COURSES_DIR):
    parts = cwd.relative_to(COURSES_DIR).parts
    match len(parts):
        case 0:
            # courses root
            cwrite("courses", Color.STYLE_ITALIC, Color.TEXT_GREEN)
        case 1:
            (dept,) = parts
            cwrite(dept.upper(), Color.STYLE_ITALIC, Color.TEXT_GREEN)
        case n:
            dept, id, *relative = parts
            cwrite(f"{dept.upper()} {id}", Color.STYLE_BOLD, Color. TEXT_GREEN)
            if relative:
                write(" ")
                write("/".join(relative))
    write(" ")
else:
    # cwd_basename = cwd.replace(os.getenv("HOME") or "~", "~")
    cwd_str = str(cwd)
    if cwd.is_relative_to(Path.home()):
        cwd_str = "~" + cwd_str[len(str(Path.home())):]
    cwrite(cwd_str, Color.TEXT_WHITE)

try:
    subprocess.check_call(
        ["git", "rev-parse"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )
    is_git_repo = True
except subprocess.CalledProcessError:
    is_git_repo = False

git_root = ""
if is_git_repo:
    try:
        git_root = (
            subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
            .decode("utf-8")
            .strip()
        )
    except subprocess.CalledProcessError:
        is_git_repo = False

# TODO: courses
if is_git_repo:
    try:
        branch_name = (
            subprocess.check_output(["git", "branch", "--show-current"])
            .decode("utf-8")
            .strip()
        )
        is_dirty = (
            len(subprocess.check_output(["git", "status", "--porcelain"]).strip()) > 0
        )
        color = Color.TEXT_YELLOW if is_dirty else Color.TEXT_GREEN_BRIGHT
        cwrite(f"({branch_name}{'*' if is_dirty else ''})", color)
    except subprocess.CalledProcessError:
        cwrite("(!)", Color.TEXT_RED_BRIGHT)


char = "#" if IS_ROOT else "$"
color = Color.TEXT_RED_BRIGHT if IS_ROOT else Color.TEXT_CYAN
cwrite(" " + char, color)

write(" ")

sys.stdout.write(OUTPUT)
